{
  "info": {
    "_postman_id": "7a63c508-ddcb-406d-9ae4-f626238bbd12",
    "name": "User Management API",
    "description": "Complete REST API collection for testing User Management CRUD operations",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Get All Users",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:3000/users",
          "protocol": "http",
          "host": ["localhost"],
          "port": "3000",
          "path": ["users"]
        },
        "description": "Retrieves all users from the system. Returns an array of user objects with their details including id, name, email, age, and timestamps."
      },
      "response": []
    },
    {
      "name": "Get User by ID",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:3000/users/1",
          "protocol": "http",
          "host": ["localhost"],
          "port": "3000",
          "path": ["users", "1"]
        },
        "description": "Retrieves a single user by their ID. Replace '1' with the actual user ID you want to retrieve."
      },
      "response": []
    },
    {
      "name": "Create New User",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"age\": 30\n}"
        },
        "url": {
          "raw": "http://localhost:3000/users",
          "protocol": "http",
          "host": ["localhost"],
          "port": "3000",
          "path": ["users"]
        },
        "description": "Creates a new user. Required fields: name (string), email (valid email format). Optional: age (number 0-150)."
      },
      "response": []
    },
    {
      "name": "Update User",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"John Updated\",\n  \"email\": \"john.updated@example.com\",\n  \"age\": 31\n}"
        },
        "url": {
          "raw": "http://localhost:3000/users/1",
          "protocol": "http",
          "host": ["localhost"],
          "port": "3000",
          "path": ["users", "1"]
        },
        "description": "Updates an existing user. Replace '1' with the actual user ID. You can update any combination of name, email, or age fields."
      },
      "response": []
    },
    {
      "name": "Delete User",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "http://localhost:3000/users/1",
          "protocol": "http",
          "host": ["localhost"],
          "port": "3000",
          "path": ["users", "1"]
        },
        "description": "Deletes a user by their ID. Replace '1' with the actual user ID you want to delete."
      },
      "response": []
    },
    {
      "name": "Create User - Validation Error Test",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"\",\n  \"email\": \"invalid-email\"\n}"
        },
        "url": {
          "raw": "http://localhost:3000/users",
          "protocol": "http",
          "host": ["localhost"],
          "port": "3000",
          "path": ["users"]
        },
        "description": "Test case for validation errors. This should return 400 Bad Request with validation error messages."
      },
      "response": []
    },
    {
      "name": "Get User - Not Found Test",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:3000/users/999",
          "protocol": "http",
          "host": ["localhost"],
          "port": "3000",
          "path": ["users", "999"]
        },
        "description": "Test case for 404 Not Found error. Uses a non-existent user ID."
      },
      "response": []
    },
    {
      "name": "API Root",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:3000/",
          "protocol": "http",
          "host": ["localhost"],
          "port": "3000",
          "path": [""]
        },
        "description": "Gets the API welcome message and list of available endpoints."
      },
      "response": []
    }
  ]
}
